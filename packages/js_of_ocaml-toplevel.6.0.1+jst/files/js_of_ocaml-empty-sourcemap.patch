--- a/compiler/bin-js_of_ocaml/cmd_arg.ml
+++ b/compiler/bin-js_of_ocaml/cmd_arg.ml
@@ -54,7 +54,7 @@
   { common : Jsoo_cmdline.Arg.t
   ; (* compile option *)
     profile : Driver.profile option
-  ; source_map : (string option * Source_map.Standard.t) option
+  ; source_map : Source_map.Spec.t option
   ; runtime_files : string list
   ; no_runtime : bool
   ; include_runtime : bool
@@ -158,6 +158,12 @@
     let doc = "Do not inline sources in source map." in
     Arg.(value & flag & info [ "source-map-no-source" ] ~doc)
   in
+  let sourcemap_empty =
+    let doc =
+      "Always generate empty source maps."
+    in
+    Arg.(value & flag & info [ "empty-sourcemap"; "empty-source-map" ] ~doc)
+  in
   let sourcemap_root =
     let doc = "root dir for source map." in
     Arg.(value & opt (some string) None & info [ "source-map-root" ] ~doc)
@@ -296,6 +302,7 @@
       sourcemap
       sourcemap_inline_in_js
       sourcemap_don't_inline_content
+      sourcemap_empty
       sourcemap_root
       target_env
       output_file
@@ -323,19 +330,26 @@
     in
     let source_map =
       if (not no_sourcemap) && (sourcemap || sourcemap_inline_in_js)
-      then
+      then (
         let file, sm_output_file =
           match output_file with
           | `Name file, _ when sourcemap_inline_in_js -> Some file, None
           | `Name file, _ -> Some file, Some (chop_extension file ^ ".map")
           | `Stdout, _ -> None, None
         in
-        Some
-          ( sm_output_file
-          , { (Source_map.Standard.empty ~inline_source_content) with
-              file
-            ; sourceroot = sourcemap_root
-            } )
+        let source_map =
+          { (Source_map.Standard.empty ~inline_source_content) with
+             file
+          ; sourceroot = sourcemap_root
+          }
+        in
+        let spec =
+          { Source_map.Spec.output_file = sm_output_file
+          ; source_map
+          ; keep_empty = sourcemap_empty
+          }
+        in
+        Some spec)
       else None
     in
     let params : (string * string) list = List.flatten set_param in
@@ -391,6 +405,7 @@
       $ sourcemap
       $ sourcemap_inline_in_js
       $ sourcemap_don't_inline_content
+      $ sourcemap_empty
       $ sourcemap_root
       $ target_env
       $ output_file
@@ -437,6 +452,12 @@
     let doc = "Do not inline sources in source map." in
     Arg.(value & flag & info [ "source-map-no-source" ] ~doc)
   in
+  let sourcemap_empty =
+    let doc =
+      "Always generate empty source maps."
+    in
+    Arg.(value & flag & info [ "empty-sourcemap"; "empty-source-map" ] ~doc)
+  in
   let sourcemap_root =
     let doc = "root dir for source map." in
     Arg.(value & opt (some string) None & info [ "source-map-root" ] ~doc)
@@ -548,6 +569,7 @@
       sourcemap
       sourcemap_inline_in_js
       sourcemap_don't_inline_content
+      sourcemap_empty
       sourcemap_root
       target_env
       output_file
@@ -570,12 +592,19 @@
           | `Name file, _ -> Some file, Some (chop_extension file ^ ".map")
           | `Stdout, _ -> None, None
         in
-        Some
-          ( sm_output_file
-          , { (Source_map.Standard.empty ~inline_source_content) with
-              file
-            ; sourceroot = sourcemap_root
-            } )
+        let source_map =
+          { (Source_map.Standard.empty ~inline_source_content) with
+            file
+          ; sourceroot = sourcemap_root
+          }
+        in
+        let spec =
+          { Source_map.Spec.output_file = sm_output_file
+          ; source_map
+          ; keep_empty = sourcemap_empty
+          }
+        in
+        Some spec
       else None
     in
     let params : (string * string) list = List.flatten set_param in
@@ -626,6 +655,7 @@
       $ sourcemap
       $ sourcemap_inline_in_js
       $ sourcemap_don't_inline_content
+      $ sourcemap_empty
       $ sourcemap_root
       $ target_env
       $ output_file
--- a/compiler/bin-js_of_ocaml/cmd_arg.mli
+++ b/compiler/bin-js_of_ocaml/cmd_arg.mli
@@ -23,7 +23,7 @@
   { common : Jsoo_cmdline.Arg.t
   ; (* compile option *)
     profile : Driver.profile option
-  ; source_map : (string option * Source_map.Standard.t) option
+  ; source_map : Source_map.Spec.t option
   ; runtime_files : string list
   ; no_runtime : bool
   ; include_runtime : bool
--- a/compiler/bin-js_of_ocaml/compile.ml
+++ b/compiler/bin-js_of_ocaml/compile.ml
@@ -155,12 +155,12 @@
     ; include_runtime
     ; effects
     } =
-  let source_map_base = Option.map ~f:snd source_map in
+  let source_map_base = Option.map ~f:(fun { Source_map.Spec.source_map; _ } -> source_map) source_map in
   let source_map =
     match source_map with
-    | None -> No_sourcemap
-    | Some (None, _) -> Inline
-    | Some (Some file, _) -> File file
+    | None | Some { keep_empty = true; _ } -> No_sourcemap
+    | Some { output_file = None; keep_empty = false; _ } -> Inline
+    | Some { output_file = Some file; keep_empty = false; _ } -> File file
   in
   let include_cmis = toplevel && not no_cmis in
   let custom_header = common.Jsoo_cmdline.Arg.custom_header in
--- a/compiler/bin-js_of_ocaml/link.ml
+++ b/compiler/bin-js_of_ocaml/link.ml
@@ -23,7 +23,7 @@

 type t =
   { common : Jsoo_cmdline.Arg.t
-  ; source_map : (string option * Source_map.Standard.t) option
+  ; source_map : Source_map.Spec.t option
   ; js_files : string list
   ; output_file : string option
   ; resolve_sourcemap_url : bool
@@ -51,6 +51,12 @@
     let doc = "Inline sourcemap in the generated JavaScript." in
     Arg.(value & flag & info [ "source-map-inline" ] ~doc)
   in
+  let sourcemap_empty =
+    let doc =
+      "Always generate empty source maps."
+    in
+    Arg.(value & flag & info [ "empty-sourcemap"; "empty-source-map" ] ~doc)
+  in
   let sourcemap_root =
     let doc = "root dir for source map." in
     Arg.(value & opt (some string) None & info [ "source-map-root" ] ~doc)
@@ -83,6 +89,7 @@
       no_sourcemap
       sourcemap
       sourcemap_inline_in_js
+      sourcemap_empty
       sourcemap_root
       output_file
       resolve_sourcemap_url
@@ -100,12 +107,19 @@
           | Some file -> Some file, Some (chop_extension file ^ ".map")
           | None -> None, None
         in
-        Some
-          ( sm_output_file
-          , { (Source_map.Standard.empty ~inline_source_content:true) with
-              file
-            ; sourceroot = sourcemap_root
-            } )
+        let source_map =
+          { (Source_map.Standard.empty ~inline_source_content:true) with
+            file
+          ; sourceroot = sourcemap_root
+          }
+        in
+        let spec =
+          { Source_map.Spec.output_file = sm_output_file
+          ; source_map
+          ; keep_empty = sourcemap_empty
+          }
+        in
+        Some spec
       else None
     in
     `Ok
@@ -126,6 +140,7 @@
       $ no_sourcemap
       $ sourcemap
       $ sourcemap_inline_in_js
+      $ sourcemap_empty
       $ sourcemap_root
       $ output_file
       $ resolve_sourcemap_url
--- a/compiler/lib/link_js.ml
+++ b/compiler/lib/link_js.ml
@@ -250,7 +250,7 @@
     build_info, units, ic
 end

-let link ~output ~linkall ~mklib ~toplevel ~files ~resolve_sourcemap_url ~source_map =
+let link ~output ~linkall ~mklib ~toplevel ~files ~resolve_sourcemap_url ~(source_map : Source_map.Spec.t option) =
   (* we currently don't do anything with [toplevel]. It could be used
      to conditionally include link_info ?*)
   ignore (toplevel : bool);
@@ -340,10 +340,15 @@
         match Line_reader.peek ic with
         | None -> ()
         | Some line ->
+            let drop_source_map =
+              match source_map with
+              | None | Some { keep_empty = true; _ } -> true
+              | Some { keep_empty = false; _ } -> false
+            in
             (match
                action
                  ~resolve_sourcemap_url
-                 ~drop_source_map:Poly.(source_map = None)
+                 ~drop_source_map
                  file
                  line
              with
@@ -468,8 +473,10 @@
   let t = Timer.make () in
   match source_map with
   | None -> ()
-  | Some (file, init_sm) ->
+  | Some { output_file = file; source_map = init_sm; keep_empty } ->
       let sections =
+        if keep_empty then []
+        else
         List.rev_map !sm ~f:(fun (sm, reloc, _offset) ->
             let sm =
               match (sm : Source_map.t) with
@@ -536,7 +543,7 @@
           Line_writer.write oc s);
       if times () then Format.eprintf "  sourcemap: %a@." Timer.print t

-let link ~output ~linkall ~mklib ~toplevel ~files ~resolve_sourcemap_url ~source_map =
+let link ~output ~linkall ~mklib ~toplevel ~files ~resolve_sourcemap_url ~(source_map : Source_map.Spec.t option) =
   try link ~output ~linkall ~toplevel ~mklib ~files ~resolve_sourcemap_url ~source_map
   with Build_info.Incompatible_build_info { key; first = f1, v1; second = f2, v2 } ->
     let string_of_v = function
--- a/compiler/lib/link_js.mli
+++ b/compiler/lib/link_js.mli
@@ -24,5 +24,5 @@
   -> toplevel:bool
   -> files:string list
   -> resolve_sourcemap_url:bool
-  -> source_map:(string option * Source_map.Standard.t) option
+  -> source_map:Source_map.Spec.t option
   -> unit
--- a/compiler/lib/source_map.ml
+++ b/compiler/lib/source_map.ml
@@ -760,3 +760,11 @@
   ; sources : string list
   ; names : string list
   }
+
+module Spec = struct
+  type t =
+    { output_file : string option
+    ; source_map : Standard.t
+    ; keep_empty : bool
+    }
+end
--- a/compiler/lib/source_map.mli
+++ b/compiler/lib/source_map.mli
@@ -154,3 +154,11 @@
   ; sources : string list
   ; names : string list
   }
+
+module Spec : sig
+  type t =
+    { output_file : string option
+    ; source_map : Standard.t
+    ; keep_empty : bool
+    }
+end
