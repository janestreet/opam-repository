--- a/runtime/js/blake2.js
+++ b/runtime/js/blake2.js
@@ -344,3 +344,33 @@
   caml_blake2_update(ctx, buf, ofs, len);
   return caml_blake2_final(ctx, hashlen);
 }
+
+//Provides: blake2_js_for_wasm_create
+//Requires: caml_blake2_create, caml_string_of_jsbytes
+function blake2_js_for_wasm_create(hashlen, key) {
+    let key_jsoo_string = caml_string_of_jsbytes(key);
+    return caml_blake2_create(hashlen, key_jsoo_string);
+}
+
+//Provides: blake2_js_for_wasm_update
+//Requires: caml_blake2_update, caml_string_of_jsbytes
+function blake2_js_for_wasm_update(ctx, buf, ofs, len) {
+    let buf_jsoo_string = caml_string_of_jsbytes(buf);
+    return caml_blake2_update(ctx, buf_jsoo_string, ofs, len);
+}
+
+//Provides: blake2_js_for_wasm_final
+//Requires: caml_blake2_final, caml_jsbytes_of_string
+function blake2_js_for_wasm_final(ctx, hashlen) {
+    return caml_jsbytes_of_string(
+        caml_blake2_final(ctx, hashlen));
+}
+
+//Provides: blake2_js_for_wasm_string
+//Requires: caml_blake2_string, caml_jsbytes_of_string, caml_string_of_jsbytes
+function blake2_js_for_wasm_string(hashlen, key, buf, ofs, len) {
+    let key_jsoo_string = caml_string_of_jsbytes(key);
+    let buf_jsoo_string = caml_string_of_jsbytes(buf);
+    return caml_jsbytes_of_string(
+        caml_blake2_string(hashlen, key_jsoo_string, buf_jsoo_string, ofs, len));
+}
--- /dev/null
+++ b/runtime/wasm/blake2.wat
@@ -0,0 +1,86 @@
+(module
+   (import "env" "wrap" (func $wrap (param anyref) (result (ref eq))))
+   (import "env" "unwrap" (func $unwrap (param (ref eq)) (result anyref)))
+   (import "env" "caml_string_of_jsbytes"
+      (func $caml_string_of_jsbytes (param (ref eq)) (result (ref eq))))
+   (import "env" "caml_jsbytes_of_string"
+      (func $caml_jsbytes_of_string (param (ref eq)) (result (ref eq))))
+   (import "env" "print_int"
+      (func $print_int (param (ref eq)) (result (ref eq))))
+
+   (import "js" "blake2_js_for_wasm_create"
+    (func $blake2_js_for_wasm_create
+      (param  (ref eq))
+      (param  anyref)
+      (result anyref)))
+
+   (import "js" "blake2_js_for_wasm_update"
+    (func $blake2_js_for_wasm_update
+      (param  anyref)
+      (param  anyref)
+      (param  (ref eq))
+      (param  (ref eq))
+      (result (ref eq))))
+
+   (import "js" "blake2_js_for_wasm_string"
+    (func $blake2_js_for_wasm_string
+      (param  (ref eq))
+      (param  anyref)
+      (param  anyref)
+      (param  (ref eq))
+      (param  (ref eq))
+      (result anyref)))
+
+   (import "js" "blake2_js_for_wasm_final"
+    (func $blake2_js_for_wasm_final
+      (param  anyref)
+      (param  (ref eq))
+      (result anyref)))
+
+  (func (export "caml_blake2_create")
+      (param $hashlen (ref eq))
+      (param $key (ref eq))
+      (result (ref eq))
+      (return_call $wrap
+        (call $blake2_js_for_wasm_create
+          (local.get $hashlen)
+          (call $unwrap (call $caml_jsbytes_of_string (local.get $key))))))
+
+   (func (export "caml_blake2_update")
+      (param $ctx (ref eq))
+      (param $buf (ref eq))
+      (param $ofs (ref eq))
+      (param $len (ref eq))
+      (result (ref eq))
+      (return_call $blake2_js_for_wasm_update
+        (call $unwrap (local.get $ctx))
+        (call $unwrap (call $caml_jsbytes_of_string (local.get $buf)))
+        (local.get $ofs)
+        (local.get $len)))
+
+  (func (export "caml_blake2_final")
+      (param $ctx (ref eq))
+      (param $hashlen (ref eq))
+      (result (ref eq))
+      (return_call $caml_string_of_jsbytes
+        (call $wrap
+          (call $blake2_js_for_wasm_final
+            (call $unwrap (local.get $ctx))
+            (local.get $hashlen)))))
+
+   (func (export "caml_blake2_string")
+      (param $hashlen (ref eq))
+      (param $key (ref eq))
+      (param $buf (ref eq))
+      (param $ofs (ref eq))
+      (param $len (ref eq))
+      (result (ref eq))
+      (return_call $caml_string_of_jsbytes
+        (call $wrap
+          (call $blake2_js_for_wasm_string
+            (local.get $hashlen)
+            (call $unwrap (call $caml_jsbytes_of_string (local.get $key)))
+            (call $unwrap (call $caml_jsbytes_of_string (local.get $buf)))
+            (local.get $ofs)
+            (local.get $len)))))
+)
