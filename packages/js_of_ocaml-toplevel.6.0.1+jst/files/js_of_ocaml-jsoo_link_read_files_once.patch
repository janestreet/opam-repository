--- a/compiler/lib/link_js.ml
+++ b/compiler/lib/link_js.ml
@@ -37,57 +37,55 @@

   val drop : t -> unit

-  val close : t -> unit
+  val reset : t -> unit

   val lnum : t -> int

   val fname : t -> string
 end = struct
   type t =
-    { ic : in_channel
-    ; fname : string
-    ; mutable next : string option
+    { fname : string
+    ; lines  : string list
+    ; mutable current : string list
     ; mutable lnum : int
     }

-  let close t = close_in t.ic
+  let reset t =
+    t.current <- t.lines;
+    t.lnum <- 0;
+  ;;

   let open_ fname =
-    let ic = open_in_bin fname in
-    { ic; lnum = 0; fname; next = None }
+    let lines =
+
+      In_channel.input_all (open_in_bin fname) |> String.split_on_char ~sep:'\n'
+    in
+    { lines; lnum = 0; fname; current = lines }

   let next t =
     let lnum = t.lnum in
     let s =
-      match t.next with
-      | None -> input_line t.ic
-      | Some s ->
-          t.next <- None;
-          s
+      match t.current with
+      | [] -> raise End_of_file
+      | x :: rem ->
+        t.current <- rem;
+        x
     in
     t.lnum <- lnum + 1;
     s

   let peek t =
-    match t.next with
-    | Some x -> Some x
-    | None -> (
-        try
-          let s = input_line t.ic in
-          t.next <- Some s;
-          Some s
-        with End_of_file -> None)
+    match t.current with
+    | x :: _ -> Some x
+    | [] ->  None

   let drop t =
-    match t.next with
-    | Some _ ->
-        t.next <- None;
-        t.lnum <- t.lnum + 1
-    | None -> (
-        try
-          let (_ : string) = input_line t.ic in
-          t.lnum <- t.lnum + 1
-        with End_of_file -> ())
+    match t.current with
+    | [] -> ()
+    | _ :: rem ->
+      t.current <- rem;
+      t.lnum <- t.lnum + 1;
+  ;;

   let lnum t = t.lnum

@@ -191,7 +189,7 @@
 module Units : sig
   val read : Line_reader.t -> Unit_info.t -> Unit_info.t

-  val scan_file : string -> Build_info.t option * Unit_info.t list
+  val scan_file : string -> Build_info.t option * Unit_info.t list * Line_reader.t
 end = struct
   let rec read ic uinfo =
     match Line_reader.peek ic with
@@ -239,8 +237,8 @@
     in
     let build_info = find_build_info ic in
     let units = scan_all ic [] in
-    Line_reader.close ic;
-    build_info, units
+    Line_reader.reset ic;
+    build_info, units, ic
 end

 let link ~output ~linkall ~mklib ~toplevel ~files ~resolve_sourcemap_url ~(source_map : Source_map.Spec.t option) =
@@ -258,7 +256,7 @@
     List.fold_right
       files
       ~init:(StringSet.empty, StringSet.empty, StringSet.empty)
-      ~f:(fun (_file, (build_info, units)) acc ->
+      ~f:(fun (_file, (build_info, units, _reader)) acc ->
         let cmo_file =
           match build_info with
           | Some bi -> (
@@ -297,7 +295,7 @@
   let t = Timer.make () in
   let sym = ref Ocaml_compiler.Symtable.GlobalMap.empty in
   let sym_js = ref [] in
-  List.iter files ~f:(fun (_, (_, units)) ->
+  List.iter files ~f:(fun (_, (_, units, _reader)) ->
       List.iter units ~f:(fun (u : Unit_info.t) ->
           StringSet.iter
             (fun s ->
@@ -310,7 +308,7 @@
             u.Unit_info.provides));

   let build_info_emitted = ref false in
-  List.iter files ~f:(fun (file, (build_info_for_file, units)) ->
+  List.iter files ~f:(fun (file, (build_info_for_file, units, reader)) ->
       let is_runtime =
         match build_info_for_file with
         | Some bi -> (
@@ -320,7 +318,7 @@
         | None -> None
       in
       let sm_for_file = ref None in
-      let ic = Line_reader.open_ file in
+      let ic = reader in
       let skip ic = Line_reader.drop ic in
       let reloc = ref [] in
       let copy ic oc =
@@ -411,6 +409,6 @@
       in
       read ();
-      Line_reader.close ic;
+      Line_reader.reset ic;
       (match is_runtime with
       | None -> ()
       | Some bi ->
