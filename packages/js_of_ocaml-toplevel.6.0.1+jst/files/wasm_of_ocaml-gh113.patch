--- /dev/null
+++ b/compiler/tests-wasm_of_ocaml/gh112.ml
@@ -0,0 +1,31 @@
+let construct x = [| x |]
+
+let get (x : float array) = x.(0)
+let get_ (x : _ array) = x.(0)
+
+let set (x : float array) e = x.(0) <- e
+let set_ (x : _ array) e = x.(0) <- e
+
+let a = construct 1.0
+
+let _ = set a 2.0
+
+let _ = assert (Float.equal (get a) 2.0)
+let _ = assert (Float.equal (get_ a) 2.0)
+
+let _ = set_ a 3.0
+
+let _ = assert (Float.equal (get a) 3.0)
+let _ = assert (Float.equal (get_ a) 3.0)
+
+let b = [| 1.0 |]
+
+let _ = set b 2.0
+
+let _ = assert (Float.equal (get b) 2.0)
+let _ = assert (Float.equal (get_ b) 2.0)
+
+let _ = set_ b 3.0
+
+let _ = assert (Float.equal (get b) 3.0)
+let _ = assert (Float.equal (get_ b) 3.0)
--- a/compiler/lib/wasm/wa_generate.ml
+++ b/compiler/lib/wasm/wa_generate.ml
@@ -1159,10 +1159,9 @@

 let init () =
   let l =
-    [ "caml_make_array", "%identity"
+    [ "caml_ensure_stack_capacity", "%identity"
-    ; "caml_ensure_stack_capacity", "%identity"
     ; "caml_callback", "caml_trampoline"
     ; "caml_checked_nativeint_to_int", "caml_checked_int32_to_int"
     ]
   in

--- a/runtime/wasm/array.wat
+++ b/runtime/wasm/array.wat
@@ -64,6 +64,30 @@
       (if (i32.eqz (local.get $sz)) (then (return (global.get $empty_array))))
       (array.new $float_array (f64.const 0) (local.get $sz)))

+   (func (export "caml_make_array") (param $vinit (ref eq)) (result (ref eq))
+      (local $init (ref $block)) (local $res (ref $float_array))
+      (local $size i32) (local $i i32)
+      (local.set $init (ref.cast (ref $block) (local.get $vinit)))
+      (local.set $size (array.len (local.get $init)))
+      (if (i32.ne (local.get $size) (i32.const 1))
+         (then
+            (if (ref.test (ref $float)
+                   (array.get $block (local.get $init) (i32.const 1)))
+               (then
+                  (local.set $size (i32.sub (local.get $size) (i32.const 1)))
+                  (local.set $res
+                     (array.new $float_array (f64.const 0) (local.get $size)))
+                  (loop $loop
+                     (array.set $float_array (local.get $res) (local.get $i)
+                        (struct.get $float 0
+                           (ref.cast (ref $float)
+                              (array.get $block (local.get $init)
+                                 (i32.add (local.get $i) (i32.const 1))))))
+                     (local.set $i (i32.add (local.get $i) (i32.const 1)))
+                     (br_if $loop (i32.lt_u (local.get $i) (local.get $size))))
+                  (return (local.get $res))))))
+      (return (local.get $init)))
+
    (func (export "caml_floatarray_unsafe_get")
       (param $a (ref eq)) (param $i (ref eq)) (result (ref eq))
       (struct.new $float
