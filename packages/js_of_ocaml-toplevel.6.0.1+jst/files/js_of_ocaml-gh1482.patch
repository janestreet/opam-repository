From 0e12ddb4a525a194348c47f028f0267fca800905 Mon Sep 17 00:00:00 2001
From: Hugo Heuzard <hugo.heuzard@gmail.com>
Date: Sun, 2 Jul 2023 13:26:44 +0200
Subject: [PATCH 1/5] Tests: add test for gh 1481

---
 compiler/tests-compiler/dune.inc  |  15 ++++
 compiler/tests-compiler/gh1481.ml | 132 ++++++++++++++++++++++++++++++
 2 files changed, 147 insertions(+)
 create mode 100644 compiler/tests-compiler/gh1481.ml

diff --git a/compiler/tests-compiler/gh1481.ml b/compiler/tests-compiler/gh1481.ml
new file mode 100644
index 0000000000..de75346bca
--- /dev/null
+++ b/compiler/tests-compiler/gh1481.ml
@@ -0,0 +1,132 @@
+let%expect_test _ =
+  let prog =
+    {|
+type test = [ `B | `C | `D | `A ]
+
+let to_string (tag : test) =
+  match tag with
+  | `A -> ("`A")
+  | `B -> ("`B")
+  | `C -> ("`C")
+  | `D -> ("`D")
+
+let correct x y =
+  let z =
+    match x, y with
+    | (`A, v) | (v, `A) -> v
+    | `B, _ | _, `B -> `B
+    | `C, _ | _, `C -> `C
+    | `D, `D -> `D
+  in
+  z
+
+let incorrect x y =
+  match x, y with
+  | (`A, v) | (v, `A) -> v
+  | `B, _ | _, `B -> `B
+  | `C, _ | _, `C -> `C
+  | `D, `D -> `D
+
+let () =
+  let a = `C in
+  Printf.printf "[a] is: %s\n" (to_string a);
+
+  let b = `A in
+  Printf.printf "[b] is: %s\n" (to_string b);
+
+  let c = correct a b in
+  Printf.printf "[correct a b] is: %s\n" (to_string c);
+
+  let d = incorrect a b in
+  Printf.printf "[incorrect a b] is: %s\n" (to_string d);
+
+  |}
+  in
+  let program = Util.compile_and_parse ~debug:false prog in
+  Util.print_program program;
+  [%expect
+    {|
+    (function(globalThis){
+       "use strict";
+       var
+        runtime = globalThis.jsoo_runtime,
+        caml_string_of_jsbytes = runtime.caml_string_of_jsbytes;
+       function caml_call2(f, a0, a1){
+        return (f.l >= 0 ? f.l : f.l = f.length) == 2
+                ? f(a0, a1)
+                : runtime.caml_call_gen(f, [a0, a1]);
+       }
+       var
+        global_data = runtime.caml_get_global_data(),
+        Stdlib_Printf = global_data.Stdlib__Printf,
+        cst_D = caml_string_of_jsbytes("`D"),
+        cst_C = caml_string_of_jsbytes("`C"),
+        cst_B = caml_string_of_jsbytes("`B"),
+        cst_A = caml_string_of_jsbytes("`A"),
+        _e_ =
+          [0,
+           [11, caml_string_of_jsbytes("[a] is: "), [2, 0, [12, 10, 0]]],
+           caml_string_of_jsbytes("[a] is: %s\n")],
+        _g_ =
+          [0,
+           [11, caml_string_of_jsbytes("[b] is: "), [2, 0, [12, 10, 0]]],
+           caml_string_of_jsbytes("[b] is: %s\n")],
+        _i_ =
+          [0,
+           [11, caml_string_of_jsbytes("[correct a b] is: "), [2, 0, [12, 10, 0]]],
+           caml_string_of_jsbytes("[correct a b] is: %s\n")],
+        _k_ =
+          [0,
+           [11,
+            caml_string_of_jsbytes("[incorrect a b] is: "),
+            [2, 0, [12, 10, 0]]],
+           caml_string_of_jsbytes("[incorrect a b] is: %s\n")];
+       function _a_(_r_){
+        return 67 <= _r_ ? 68 <= _r_ ? cst_D : cst_C : 66 <= _r_ ? cst_B : cst_A;
+       }
+       function _b_(_p_, _o_){
+        if(65 === _p_)
+         var _q_ = _o_;
+        else{
+         if(68 === _p_ && 68 === _o_) return 68;
+         if(65 !== _o_){
+          if(66 !== _o_ && 66 !== _p_){67 === _p_; return 67;}
+          return 66;
+         }
+         var _q_ = _p_;
+        }
+        return _q_;
+       }
+       function _c_(_m_, _l_){
+        if(65 === _m_)
+         var _n_ = _l_;
+        else{
+         if(68 === _m_ && 68 === _l_) return 68;
+         if(65 !== _l_){
+          if(66 !== _l_ && 66 !== _m_){67 === _m_; return 67;}
+          return 66;
+         }
+         var _n_ = _m_;
+        }
+        return _n_;
+       }
+       var _d_ = _a_(67);
+       caml_call2(Stdlib_Printf[2], _e_, _d_);
+       var _f_ = _a_(65);
+       caml_call2(Stdlib_Printf[2], _g_, _f_);
+       var _h_ = _a_(_b_(67, 65));
+       caml_call2(Stdlib_Printf[2], _i_, _h_);
+       var _j_ = _a_(_c_(67, 65));
+       caml_call2(Stdlib_Printf[2], _k_, _j_);
+       var Test = [0, _a_, _b_, _c_];
+       runtime.caml_register_global(9, Test, "Test");
+       return;
+      }
+      (globalThis));
+    //end |}];
+  Util.compile_and_run ~debug:false prog;
+  [%expect {|
+    [a] is: `C
+    [b] is: `A
+    [correct a b] is: `C
+    [incorrect a b] is: `C |}]

From 40fbbcd3960d3ce00cc6c01f440a1908b7f20532 Mon Sep 17 00:00:00 2001
From: Hugo Heuzard <hugo.heuzard@gmail.com>
Date: Tue, 4 Jul 2023 00:17:28 +0200
Subject: [PATCH 2/5] fix

---
 compiler/lib/generate.ml          |  7 ++-
 compiler/tests-compiler/gh1481.ml | 73 +++++++++++++++++++++++--------
 2 files changed, 60 insertions(+), 20 deletions(-)

diff --git a/compiler/lib/generate.ml b/compiler/lib/generate.ml
index caef5e7462..1033262d09 100644
--- a/compiler/lib/generate.ml
+++ b/compiler/lib/generate.ml
@@ -1698,8 +1698,11 @@ and compile_merge_node
       let new_frontier =
         members
         |> List.map ~f:(fun pc ->
-               let seen = get_seen st pc in
-               dominance_frontier ~seen st pc)
+               if Addr.Set.mem pc frontier
+               then Addr.Set.singleton pc
+               else
+                 let seen = get_seen st pc in
+                 dominance_frontier ~seen st pc)
         |> List.fold_left ~init:Addr.Set.empty ~f:Addr.Set.union
       in
       (* The frontier has to move when compiling a merge node. Fail early instead of infinite recursion. *)
diff --git a/compiler/tests-compiler/gh1481.ml b/compiler/tests-compiler/gh1481.ml
index de75346bca..279a269665 100644
--- a/compiler/tests-compiler/gh1481.ml
+++ b/compiler/tests-compiler/gh1481.ml
@@ -85,28 +85,64 @@ let () =
         return 67 <= _r_ ? 68 <= _r_ ? cst_D : cst_C : 66 <= _r_ ? cst_B : cst_A;
        }
        function _b_(_p_, _o_){
-        if(65 === _p_)
-         var _q_ = _o_;
-        else{
-         if(68 === _p_ && 68 === _o_) return 68;
-         if(65 !== _o_){
-          if(66 !== _o_ && 66 !== _p_){67 === _p_; return 67;}
-          return 66;
+        var switch$0 = 0;
+        if(typeof _p_ === "number")
+         if(65 === _p_){
+          var _q_ = _o_;
+          switch$0 = 1;
          }
-         var _q_ = _p_;
+         else if(68 === _p_ && typeof _o_ === "number" && 68 === _o_) return 68;
+        if(! switch$0){
+         var switch$1 = 0;
+         if(typeof _o_ === "number")
+          if(65 === _o_){
+           var _q_ = _p_;
+           switch$1 = 2;
+          }
+          else if(66 === _o_) switch$1 = 1;
+         var switch$2 = 0;
+         switch(switch$1){
+           case 0:
+            var switch$3 = 0;
+            if(typeof _p_ === "number")
+             if(66 === _p_) switch$3 = 1; else 67 === _p_;
+            if(! switch$3) return 67;
+            break;
+           case 2:
+            switch$2 = 1; break;
+         }
+         if(! switch$2) return 66;
         }
         return _q_;
        }
        function _c_(_m_, _l_){
-        if(65 === _m_)
-         var _n_ = _l_;
-        else{
-         if(68 === _m_ && 68 === _l_) return 68;
-         if(65 !== _l_){
-          if(66 !== _l_ && 66 !== _m_){67 === _m_; return 67;}
-          return 66;
+        var switch$0 = 0;
+        if(typeof _m_ === "number")
+         if(65 === _m_){
+          var _n_ = _l_;
+          switch$0 = 1;
+         }
+         else if(68 === _m_ && typeof _l_ === "number" && 68 === _l_) return 68;
+        if(! switch$0){
+         var switch$1 = 0;
+         if(typeof _l_ === "number")
+          if(65 === _l_){
+           var _n_ = _m_;
+           switch$1 = 2;
+          }
+          else if(66 === _l_) switch$1 = 1;
+         var switch$2 = 0;
+         switch(switch$1){
+           case 0:
+            var switch$3 = 0;
+            if(typeof _m_ === "number")
+             if(66 === _m_) switch$3 = 1; else 67 === _m_;
+            if(! switch$3) return 67;
+            break;
+           case 2:
+            switch$2 = 1; break;
          }
-         var _n_ = _m_;
+         if(! switch$2) return 66;
         }
         return _n_;
        }
@@ -124,8 +160,9 @@ let () =
       }
       (globalThis));
     //end |}];
-  Util.compile_and_run ~debug:false prog;
-  [%expect {|
+  Util.compile_and_run ~debug:false ~flags:[ "--disable"; "inline" ] prog;
+  [%expect
+    {|
     [a] is: `C
     [b] is: `A
     [correct a b] is: `C

From 0aa66c510f5409a22d7ddf955c1c824dcb74f069 Mon Sep 17 00:00:00 2001
From: Hugo Heuzard <hugo.heuzard@gmail.com>
Date: Tue, 4 Jul 2023 01:00:41 +0200
Subject: [PATCH 3/5] make test pass with ocaml414

---
 compiler/tests-compiler/gh1481.ml | 118 ------------------------------
 1 file changed, 118 deletions(-)

diff --git a/compiler/tests-compiler/gh1481.ml b/compiler/tests-compiler/gh1481.ml
index 279a269665..6fe64ef504 100644
--- a/compiler/tests-compiler/gh1481.ml
+++ b/compiler/tests-compiler/gh1481.ml
@@ -42,124 +42,6 @@ let () =

   |}
   in
-  let program = Util.compile_and_parse ~debug:false prog in
-  Util.print_program program;
-  [%expect
-    {|
-    (function(globalThis){
-       "use strict";
-       var
-        runtime = globalThis.jsoo_runtime,
-        caml_string_of_jsbytes = runtime.caml_string_of_jsbytes;
-       function caml_call2(f, a0, a1){
-        return (f.l >= 0 ? f.l : f.l = f.length) == 2
-                ? f(a0, a1)
-                : runtime.caml_call_gen(f, [a0, a1]);
-       }
-       var
-        global_data = runtime.caml_get_global_data(),
-        Stdlib_Printf = global_data.Stdlib__Printf,
-        cst_D = caml_string_of_jsbytes("`D"),
-        cst_C = caml_string_of_jsbytes("`C"),
-        cst_B = caml_string_of_jsbytes("`B"),
-        cst_A = caml_string_of_jsbytes("`A"),
-        _e_ =
-          [0,
-           [11, caml_string_of_jsbytes("[a] is: "), [2, 0, [12, 10, 0]]],
-           caml_string_of_jsbytes("[a] is: %s\n")],
-        _g_ =
-          [0,
-           [11, caml_string_of_jsbytes("[b] is: "), [2, 0, [12, 10, 0]]],
-           caml_string_of_jsbytes("[b] is: %s\n")],
-        _i_ =
-          [0,
-           [11, caml_string_of_jsbytes("[correct a b] is: "), [2, 0, [12, 10, 0]]],
-           caml_string_of_jsbytes("[correct a b] is: %s\n")],
-        _k_ =
-          [0,
-           [11,
-            caml_string_of_jsbytes("[incorrect a b] is: "),
-            [2, 0, [12, 10, 0]]],
-           caml_string_of_jsbytes("[incorrect a b] is: %s\n")];
-       function _a_(_r_){
-        return 67 <= _r_ ? 68 <= _r_ ? cst_D : cst_C : 66 <= _r_ ? cst_B : cst_A;
-       }
-       function _b_(_p_, _o_){
-        var switch$0 = 0;
-        if(typeof _p_ === "number")
-         if(65 === _p_){
-          var _q_ = _o_;
-          switch$0 = 1;
-         }
-         else if(68 === _p_ && typeof _o_ === "number" && 68 === _o_) return 68;
-        if(! switch$0){
-         var switch$1 = 0;
-         if(typeof _o_ === "number")
-          if(65 === _o_){
-           var _q_ = _p_;
-           switch$1 = 2;
-          }
-          else if(66 === _o_) switch$1 = 1;
-         var switch$2 = 0;
-         switch(switch$1){
-           case 0:
-            var switch$3 = 0;
-            if(typeof _p_ === "number")
-             if(66 === _p_) switch$3 = 1; else 67 === _p_;
-            if(! switch$3) return 67;
-            break;
-           case 2:
-            switch$2 = 1; break;
-         }
-         if(! switch$2) return 66;
-        }
-        return _q_;
-       }
-       function _c_(_m_, _l_){
-        var switch$0 = 0;
-        if(typeof _m_ === "number")
-         if(65 === _m_){
-          var _n_ = _l_;
-          switch$0 = 1;
-         }
-         else if(68 === _m_ && typeof _l_ === "number" && 68 === _l_) return 68;
-        if(! switch$0){
-         var switch$1 = 0;
-         if(typeof _l_ === "number")
-          if(65 === _l_){
-           var _n_ = _m_;
-           switch$1 = 2;
-          }
-          else if(66 === _l_) switch$1 = 1;
-         var switch$2 = 0;
-         switch(switch$1){
-           case 0:
-            var switch$3 = 0;
-            if(typeof _m_ === "number")
-             if(66 === _m_) switch$3 = 1; else 67 === _m_;
-            if(! switch$3) return 67;
-            break;
-           case 2:
-            switch$2 = 1; break;
-         }
-         if(! switch$2) return 66;
-        }
-        return _n_;
-       }
-       var _d_ = _a_(67);
-       caml_call2(Stdlib_Printf[2], _e_, _d_);
-       var _f_ = _a_(65);
-       caml_call2(Stdlib_Printf[2], _g_, _f_);
-       var _h_ = _a_(_b_(67, 65));
-       caml_call2(Stdlib_Printf[2], _i_, _h_);
-       var _j_ = _a_(_c_(67, 65));
-       caml_call2(Stdlib_Printf[2], _k_, _j_);
-       var Test = [0, _a_, _b_, _c_];
-       runtime.caml_register_global(9, Test, "Test");
-       return;
-      }
-      (globalThis));
-    //end |}];
   Util.compile_and_run ~debug:false ~flags:[ "--disable"; "inline" ] prog;
   [%expect
     {|

From 35072aa464739cd3dd49d8d60b4c4051e47e3d91 Mon Sep 17 00:00:00 2001
From: Hugo Heuzard <hugo.heuzard@gmail.com>
Date: Tue, 4 Jul 2023 01:01:35 +0200
Subject: [PATCH 4/5] typo

---
 compiler/lib/generate.ml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/compiler/lib/generate.ml b/compiler/lib/generate.ml
index 1033262d09..367e2041f2 100644
--- a/compiler/lib/generate.ml
+++ b/compiler/lib/generate.ml
@@ -1731,7 +1731,7 @@ and colapse_frontier name st (new_frontier' : Addr.Set.t) interm =
   if debug ()
   then
     Format.eprintf
-      "Resove %s to %s;@,"
+      "Resolve %s to %s;@,"
       (string_of_set new_frontier')
       (string_of_set new_frontier);
   if Addr.Set.cardinal new_frontier <= 1

From 22c6931a39f802af2a905b4ccb2ac049694ab43a Mon Sep 17 00:00:00 2001
From: Hugo Heuzard <hugo.heuzard@gmail.com>
Date: Tue, 4 Jul 2023 01:10:02 +0200
Subject: [PATCH 5/5] Changes

---
 CHANGES.md | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/CHANGES.md b/CHANGES.md
index c48f55e853..a26aefb02e 100644
--- a/CHANGES.md
+++ b/CHANGES.md
@@ -4,6 +4,8 @@
 * Runtime: fix hashing of NaN (#1475)
 * Runtime: float rounding should resolve tie away from zero (#1475)
 * Runtime: fix Gc.stat, Gc.quick_stat, Gc.get (#1475)
+* Compiler: fix some miscompilation, probably introduced in jsoo 5.0.0,
+  revealed by OCaml 5.0 ?

 # 5.3.0 (2023-??-??) - ??
 ## Features/Changes
