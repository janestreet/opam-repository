opam-version: "2.0"
maintainer: "Jane Street developers"
authors: ["Jane Street Group, LLC"]
homepage: "https://github.com/janestreet/accessor"
bug-reports: "https://github.com/janestreet/accessor/issues"
dev-repo: "git+https://github.com/janestreet/accessor.git"
doc: "https://ocaml.janestreet.com/ocaml-core/latest/doc/accessor/index.html"
license: "MIT"
build: [
  ["dune" "build" "-p" name "-j" jobs]
]
depends: [
  "ocaml"         {>= "5.1.0"}
  "base"          {= "v0.18~preview.130.55+197"}
  "higher_kinded" {= "v0.18~preview.130.55+197"}
  "ppx_jane"      {= "v0.18~preview.130.55+197"}
  "dune"          {>= "3.17.0"}
]
available: arch != "arm32" & arch != "x86_32"
synopsis:
  "A library that makes it nicer to work with nested functional data structures"
description: """
An accessor is a value that understands how to reach data within a larger data structure,
independently from what you intend to do with it. Accessors allow you to read and write
data and perform possibly-monadic traversals. By composing accessors, you can work with
increasingly complex data structures.

In case you have ever heard of "lenses", this is an OCaml implementation of that idea.
"""
url {
  src:
    "https://github.com/janestreet/accessor/archive/75524b9858b7a5b228780f0c01d0bb16962d7b9f.tar.gz"
  checksum:
    "sha256=6500ca01bf370d6f922dbe5395454bc9fdee27ff00830b82bd5006c114573ecf"
}
